#!/usr/bin/python
# ----------------
# SENC
# Sam Plum - 2014-05-08
# ----------------
# Sam's External Node Classifier
#
# Influence - http://gitlab.advdc.com/sys/influence/tree/master

from optparse import OptionParser
import yaml
import sys
import subprocess
import os
import re

def get_groupdata(data):
  #print "Data:"
  #print data
  if debug: print data
  if 'groups' in data:
    try:
      for group in data['groups']:
        if debug: print "Found group {0}".format(group)
        spath = os.path.dirname(os.path.realpath(__file__))
        f = open(spath + '/groups/' + group)
        groupdata = yaml.safe_load(f)
        f.close()
        #print "Going deeper"
        groupdata = get_groupdata(groupdata)
        #print "Cur data:"
        #print data
        #print "{0} data:".format(group)
        #print groupdata
        if 'parameters' in groupdata:
          if 'parameters' in data:
            #print "New parameters found, adding"
            data['parameters'] = dict(groupdata['parameters'].items() + data['parameters'].items())
          else:
            #print "Parameters found."
            data['parameters'] = groupdata['parameters']
        if 'classes' in groupdata:
          if 'classes' in data:
            #print "New classes found, adding"
            #print "Current classes:"
            #print data['classes']
            #print "New classes:"
            #print groupdata['classes']
            for gclass in groupdata['classes']:
              if not gclass in data['classes']:
                data['classes'].append(gclass)
            #data['classes'].extend(groupdata['classes'])
            #print "after add:"
            #print data['classes']
          else:
            #print "Classes found"
            data['classes'] = groupdata['classes']
        if debug: print
      del data['groups']
    except IOError:
     print "Unable to retrieve data."
     exit(1)
  else:
    if debug: print "No group data, found, time to go back up."
  #print "Returning:"
  return data

def guess_classification(requestednode):
  # This function is used when a node
  # is not listed in SENC's database.
  #
  # It will guess at the correct settings
  # for the node.

  if verbose: print "No definition found, guessing..."
  data = {}
  data['classes'] = []
  data['parameters'] = {}
  data['groups'] = []
  spath = os.path.dirname(os.path.realpath(__file__))

  # Read YAML file "matches"
  try:
    if debug: print "Loading Name-based Assignment Config"
    f = open(spath + '/matches')
    matchdata = yaml.safe_load(f)
    f.close()
  except IOError:
    print "Unknown node and no 'matches' file provided."
    exit(1)

  for match in matchdata:
    if debug: print "Matching {1} to group {0}.".format(match, matchdata[match])
    pattern = re.compile(matchdata[match])
    foundmatch = pattern.search(requestednode)
    if foundmatch: 
      data['groups'].append(match) 

  # Check if AWS
  pattern = re.compile("i-[a-f0-9]{6,}")
  instanceid = pattern.search(requestednode)
  if instanceid:
    try:
      if debug: print "Looking for AWS info."
      f = open(spath + '/aws')
      awsconfig = yaml.safe_load(f)
      f.close()
    except IOError:
      print "Unable to accees AWS config in file 'aws'."
      return data
    if not 'cli' in awsconfig:
      if debug: print "AWS CLI not specified in 'aws' config file. Please add 'cli: <path to cli>'."
      return data
    awscli = awsconfig['cli']
    if not os.path.isfile(awscli):
      if debug: print "CLI specified in 'aws' config file does not exist."
      return data
    if not 'tag' in awsconfig:
      if debug: print "Group tag not specified in 'aws' config file. Please add 'tag: <yourtag>'."
      return data
    grouptag = awsconfig['tag']
    p = subprocess.Popen([awscli, "ec2", "describe-instances", "--instance-id", instanceid.group(0), "--query", "Reservations[*].Instances[*].[Tags[?Key==`" + grouptag + "`].Value]", "--output", "text"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    taglist, err = p.communicate()
    if taglist != "":
      tags = taglist.rstrip().split(',')
      for tag in tags:
        data['groups'].append(tag)
  return data

def get_classification(requestednode):
  try:
    spath = os.path.dirname(os.path.realpath(__file__))
    f = open(spath + '/nodes/' + requestednode)
    data = yaml.safe_load(f)
    f.close()
    if not isinstance(data, dict):
      data = guess_classification(requestednode)
    if not 'classes' in data:
      data['classes'] = []
    if not 'parameters' in data:
      data['parameters'] = {}
    data['name'] = requestednode
    data = get_groupdata(data)
  except IOError:
    data = guess_classification(requestednode)
    #data['classes'] = []
    #data['parameters'] = {}
    data['name'] = requestednode
    data = get_groupdata(data)
    #print "Unknown node."
    #exit(1)
  return data

def pingnodes():
  spath = os.path.dirname(os.path.realpath(__file__))
  nodelist = os.listdir(spath + '/nodes')
  lostnodes = open(spath + '/lostnodes', 'w+')
  for node in nodelist:
    response = os.system("/bin/ping -c 1 " + node + " > /dev/null 2>&1")
    if response != 0:
      lostnodes.write(node + "\n")
      if verbose: print "Cannot reach: {0}".format(node)
  

def comparetodash():
  #ouryaml = yaml.dump(ours, default_flow_style=False)
  badcount = 0
  goodcount = 0
  p = subprocess.Popen(["/usr/bin/env", "PUPPET_DASHBOARD_URL=http://puppetshow.advdc.com:80", "/usr/share/puppet-dashboard/bin/external_node"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  dashstr, err = p.communicate()
  dash = yaml.safe_load(dashstr)
  totalcount = len(dash)
  for dashnode in dash:
    ours = get_classification(dashnode['name'])
    classok = cmp(sorted(dashnode['classes']), sorted(ours['classes']))
    paramok = cmp(dashnode['parameters'], ours['parameters'])
    if classok != 0 or paramok != 0:
      badcount += 1
      if verbose: print "{0} not ok!".format(dashnode['name'])
      if classok != 0:
        if verbose: print "Our Classes:"
        if verbose: print yaml.dump(sorted(ours['classes']), default_flow_style=False)
        if verbose: print "Dash Classes:"
        if verbose: print yaml.dump(sorted(dashnode['classes']), default_flow_style=False)
      if paramok != 0:
        if verbose: print "Our Parameters:"
        if verbose: print yaml.dump(ours['parameters'], default_flow_style=False)
        if verbose: print "Dash Parameters:"
        if verbose: print yaml.dump(dashnode['parameters'], default_flow_style=False)
    else:
      goodcount += 1
  print "Good {0}/{1}".format(goodcount, totalcount)
  print "Bad  {0}/{1}".format(badcount, totalcount)
    #print ours
    #print dashnode['name']
    #print ours['name']
    #print dashnode['classes']
    #print ours['classes']
    #print dashnode['parameters'] 
    #print ours['parameters']
    #print
  #print "Match? %d" % cmp(ours, orig)
    
def main():
  parser = OptionParser()
  parser.add_option("--manual", dest="showman",default=False,help="Show the manual page", action='store_true')
  parser.add_option("-v","--verbose", dest="verbose",default=False, help="Verbose Output", action='store_true')
  parser.add_option("--debug", dest="debug",default=False, help="Debug Output", action='store_true')
  parser.add_option("--verify", dest="verify",default=False, help="Verify Against Dashboard", action='store_true')
  parser.add_option("--ping", dest="ping",default=False, help="Look for nonresponsive nodes", action='store_true')
  (opts, args) = parser.parse_args()

  if (opts.showman):
    help(__name__)
    exit(-1)

  global verbose
  verbose = opts.verbose
  global debug
  debug = opts.debug

  if (opts.verify):
    comparetodash()
    exit()

  if (opts.ping):
    pingnodes()
    exit()

  if len(args) > 0:
    classification = get_classification(args[0])
    print "---\n" + yaml.dump(classification, default_flow_style=False)
  else:
    nodelist = os.listdir(os.getcwd() + '/nodes')
    nodes = []
    for node in nodelist:
      nodes.append(get_classification(node))
    print "---\n" + yaml.dump(nodes, default_flow_style=False)
    
if __name__ == "__main__":
  main()
